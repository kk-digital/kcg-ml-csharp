<?xml version="1.0" encoding="utf-8"?>
<Project>

  <PropertyGroup>
    <MonoTorrentReleaseSuffix Condition="Exists ('$(GitCommitsRelativeTo)\alpha.txt')">-alpha.unstable</MonoTorrentReleaseSuffix>
    <MonoTorrentReleaseSuffix Condition="Exists ('$(GitCommitsRelativeTo)\beta.txt')">-beta</MonoTorrentReleaseSuffix>

    <Nullable Condition="$(TargetFramework) == 'netstandard2.0' Or $(TargetFramework) == 'net472'">annotations</Nullable>
    <Nullable Condition="$(TargetFramework) != 'netstandard2.0' And $(TargetFramework) != 'net472'">enable</Nullable>
  </PropertyGroup>

  <ItemGroup Condition="$(GitInfoVersion) != ''">
    <PackageReference Update="GitInfo" Version="$(GitInfoVersion)" PrivateAssets="all" />
    <Compile Include="$(MSBuildThisFileDirectory)GitInfoHelper.cs" Link="Linked\%(FileName)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Update="Mono.Nat" Version="$(MonoNatVersion)" />
    <PackageReference Update="StandardSocketsHttpHandler" Version="$(StandardSocketsHttpHandlerVersion)" />
  </ItemGroup>
  
  <ItemGroup>
    <Compile Condition="$(UseBigEndianBigInteger)" Include="$(MSBuildThisFileDirectory)BigEndianBigInteger.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseBitOps)" Include="$(MSBuildThisFileDirectory)BitOps.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseCache)" Include="$(MSBuildThisFileDirectory)ICacheable.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseCache)" Include="$(MSBuildThisFileDirectory)Cache.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseEnsureThreadPool)" Include="$(MSBuildThisFileDirectory)EnsureThreadPool.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseIListExtensions)" Include="$(MSBuildThisFileDirectory)IListExtensions.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseLogger)" Include="$(MSBuildThisFileDirectory)Logger.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseMainLoop)" Include="$(MSBuildThisFileDirectory)MainLoop.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseMemoryExtensions)" Include="$(MSBuildThisFileDirectory)MemoryExtensions.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseNullabilityHelpers)" Include="$(MSBuildThisFileDirectory)NullabilityAttributes.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseSemaphoreSlimExtensions)" Include="$(MSBuildThisFileDirectory)SemaphoreSlimExtensions.cs" Link="Linked\%(Filename)%(Extension)" />
    <Compile Condition="$(UseSimpleSpinLock)" Include="$(MSBuildThisFileDirectory)SimpleSpinLock.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseThreadSwitcher)" Include="$(MSBuildThisFileDirectory)ThreadSwitcher.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseTorrentFileExtensions)" Include="$(MSBuildThisFileDirectory)TorrentFileExtensions.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseUdpClientExtensions)" Include="$(MSBuildThisFileDirectory)UdpClientExtensions.cs" Link="Linked\%(FileName)%(Extension)" />
    <Compile Condition="$(UseValueStopWatch)" Include="$(MSBuildThisFileDirectory)ValueStopwatch.cs" Link="Linked\%(FileName)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Update="ReusableTasks" Version="$(ReusableTasksVersion)" />
    <PackageReference Update="System.Memory" Version="$(SystemMemoryVersion)" />
  </ItemGroup>

  <Target Name="CreateOutDirectory" BeforeTargets="_GetAllRestoreProjectPathItems;Restore;BeforeResolveReferences;CollectPackageReferences">
    <MakeDir Directories="$(Out)" />
  </Target>

  <Target Name="SetAssemblyVersion" BeforeTargets="GetAssemblyVersion" Condition="'$(RestoreSuccess)' != 'true' Or '$(Configuration)' == 'Debug' Or '$(GitInfoVersion)' == '' ">
    <PropertyGroup>
      <Version>0.0.0.1</Version>
      <AssemblyVersion>$(Version)</AssemblyVersion>
      <FileVersion Condition="'$(FileVersion)' == ''">$(Version)</FileVersion>
      <InformationalVersion Condition="'$(InformationalVersion)' == ''">$(Version)-Debug</InformationalVersion>
    </PropertyGroup>
  </Target>

  <!-- Restore success is in the .nuget.g.props file generated as part of msbuild /t:Restore. We do not -->
  <!-- want this logic to run if restore hasn't been executed as the 'GitVersion' target won't exist.   -->
  <Target Name="SetAssemblyVersion" BeforeTargets="GetAssemblyVersion" Condition="'$(RestoreSuccess)' == 'true' And '$(Configuration)' == 'Release' And '$(GitInfoVersion)' != ''" DependsOnTargets="GitVersion">
    <PropertyGroup>
      <MonoTorrentFileVersion Condition="$(MonoTorrentReleaseSuffix) == ''">$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</MonoTorrentFileVersion>
      <MonoTorrentFileVersion Condition="$(MonoTorrentReleaseSuffix) != ''">$(GitBaseVersion)</MonoTorrentFileVersion>

      <PaddedSemVerPatch>$([System.String]::Format('{0:0000}', $([System.Int32]::Parse('$(GitSemVerPatch)'))))</PaddedSemVerPatch>
      <MonoTorrentReleaseSuffix Condition="$(MonoTorrentReleaseSuffix) != ''">$(MonoTorrentReleaseSuffix).rev$(PaddedSemVerPatch)</MonoTorrentReleaseSuffix>
      <MonoTorrentInformationalVersion>$(MonoTorrentFileVersion)-$(GitBranch)+$(GitCommit)</MonoTorrentInformationalVersion>

      <AssemblyVersion Condition="'$(AssemblyVersion)' == ''">$(MonoTorrentABIVersion)</AssemblyVersion>
      <FileVersion Condition="'$(FileVersion)' == ''">$(MonoTorrentFileVersion)</FileVersion>
      <InformationalVersion Condition="'$(InformationalVersion)' == ''">$(MonoTorrentInformationalVersion)</InformationalVersion>
    </PropertyGroup>
  </Target>

</Project>
